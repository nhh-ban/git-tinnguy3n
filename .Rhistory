?mean
a<-3
b<-5000/4
c <- 25
vector(a,b,c)
mean(a,b,c)
HERO <- a + b + c
Ja <- 45
Nei <- 20
Vet ikke <- 5
"Vet ikke" <- 5
Antall deltakere <- Ja + Nei + "Vet ikke"
Antall deltakere <- Ja + Nei + Vet ikke
"Antall deltakere" <- Ja + Nei + Vet ikke
"Antall deltakere" <- Ja + Nei + "Vet ikke"
"Antall deltakere" <- Ja + Nei + Vet ikke
"Antall deltakere" <- Ja + Nei + Vet ikke
"Antall deltakere" <- (Ja + Nei + Vet ikke)
"Antall deltakere" <- (Ja + Nei + Vet ikke)
"Antall deltakere" <- Ja + Nei + `Vet ikke`
c(2,5,7,8)
k <- c(2,5,7,8)
v_1 <- c(2,5,7,8)    #Vektor 1
v_1 <- c(2,5,7,8)    #Vektor 1
v_2 <- c(1,2,3,4)    #Vektor 2
load("~/Desktop/NHH/Faglig/4. Semester/MET4/Intro til R/testscript.R")
library(quantmod)
library(MASS)
prices <- lapply(symbols, function(symbol) {
data <- getSymbols(symbol, src = "yahoo", from = start_date, to = end_date, auto.assign = FALSE)
Ad(data)
})
2+2
(2+8)/2
2+8/2
a <- 5
a
a*4
b <- 3
c <- a + b
c <- 4
c <- c + 2
d
whatever_we_want <- "hello world"
whatever_we_want
vector1 <- c(3, 5, 7.7, 10, 2, 0.16, -3)
vector1
vector1[1]
vector1[10]
vector1[2:5]
vector1[c(1, 3)]
vector1*2
vector1 - 2
length(vector1)
sum(vector1)
mean(vector1)
sd(vector1)
round(sd(vector1))
round(sd(vector1), digits = 2)
library(readxl)
# Create some data
x <- (-500):500
# We want to calculate mean squirt of abs values of x...
# one way: via temporary variables:
abs.x <- abs(x)
sqrt.abs.x <- sqrt(abs.x)
alt.1 <- mean(sqrt.abs.x)
print(alt.1)
# We could nest the three function calls above
alt.2 <- mean(sqrt(abs(x)))
print(alt.2)
2 |> sqrt()
mean((c(1,2,NA), na.rm=T)
mean(c(1,2,NA), na.rm=T)
c(1,2,NA) |> na.rm=T
c(1,2,NA) |> mean(na.rm=T)
atan2(x=1, y=2)
2 |> atan2(x=1, y=_)
library(magrittr)
2 %>% . ^ 2
2 %>% atan2(1,.)
rm(list = lm())
rm(list = lt())
rm(list = ls())
library(tweedie)
install.packages(tweedie)
install.packages("tweedie")
library(tweedie)
rtweedie(n = 10, mu = 10000, phi = 10 000, power = 1.9)
rtweedie(n = 10, mu = 10000, phi = 10000, power = 1.9)
rtweedie(n = 10, mu = 10000, phi = 1000, power = 1.9)
# Ramping up to 100 000 observations, and finding the mean value of sample
x <- rtweedie(n = 100 000, mu = 10000, phi = 1000, power = 1.9)
x <- rtweedie(n = 100000, mu = 10000, phi = 1000, power = 1.9)
mean(x)
N <- 100
true_mu = 10000
sample <- rtweedie(N, mu = true_mu, phi = 1000, power = 1.9)
t.test(sample, mu = true_mu)
t.test(sample, mu = true_mu)
sample <- rtweedie(N, mu = true_mu, phi = 1000, power = 1.9)
t.test(sample, mu = true_mu)
sample <- rtweedie(N, mu = true_mu, phi = 1000, power = 1.9)
t.test(sample, mu = true_mu)
sample <- rtweedie(N, mu = true_mu, phi = 1000, power = 1.9)
t.test(sample, mu = true_mu)
sample <- rtweedie(N, mu = true_mu, phi = 1000, power = 1.9)
t.test(sample, mu = true_mu)
sample <- rtweedie(N, mu = true_mu, phi = 1000, power = 1.9)
t.test(sample, mu = true_mu)
sample <- rtweedie(N, mu = true_mu, phi = 1000, power = 1.9)
t.test(sample, mu = true_mu)
sample <- rtweedie(N, mu = true_mu, phi = 1000, power = 1.9)
t.test(sample, mu = true_mu)
sample <- rtweedie(N, mu = true_mu, phi = 1000, power = 1.9)
t.test(sample, mu = true_mu)
sample <- rtweedie(N, mu = true_mu, phi = 1000, power = 1.9)
sample <- rtweedie(N, mu = true_mu, phi = 1000, power = 1.9)
t.test(sample, mu = true_mu)
sample <- rtweedie(N, mu = true_mu, phi = 1000, power = 1.9)
t.test(sample, mu = true_mu)
# Task 1 - Simulation of M samples
simTweedieTest <- t.test(rtweedie(N, mu = true_mu, phi = 100, power = 1.9),
mu = true_mu)$p.value
simTweedieTest
simulate(simTweedieTest)
simTweedieTest <- t.test(rtweedie(N, mu = 10000, phi = 100, power = 1.9),
mu = 10000)$p.value
simTweedieTest
simTweedieTest
simTweedieTest
simTweedieTest
# Task 1 - Simulation of M samples
simTweedieTest <- function(N){
t.test(rtweedie(N, mu = 10000, phi = 100, power = 1.9),
mu = 10000)$p.value
}
simTweedieTest(N)
simTweedieTest(N)
simTweedieTest(N)
simTweedieTest(N)
simTweedieTest(N)
simTweedieTest(N)       # Now it gives us the different p-values automatically
simTweedieTest(N)       # Now it gives us the different p-values automatically
MTweedieTests <- function(M, N, alpha) {
t.test(rtweedie(N, mu = 10000, phi = 100, power = 1.9),
mu = 10000)$p.value
}
MTweedieTests(10, N, .05)
MTweedieTests(10, N, .05)
MTweedieTests(10, N, .05)
snippet lib
install.packages("palmerpenguins")
ggplot(penguins,
aes(x = flipper_length_mm, y = bill_length_mm)) +
geom_point(aes(color = species, shape = species)) +
scale_color_manual(values = c("darkorange","purple","cyan4")) +
labs(
title = "Flipper and bill length",
subtitle = "Dimensions for penguins at Palmer Station LTER",
x = "Flipper length (mm)", y = "Bill length (mm)",
color = "Penguin species", shape = "Penguin species"
) +
theme_minimal()
library(tidyverse)
ggplot(penguins,
aes(x = flipper_length_mm, y = bill_length_mm)) +
geom_point(aes(color = species, shape = species)) +
scale_color_manual(values = c("darkorange","purple","cyan4")) +
labs(
title = "Flipper and bill length",
subtitle = "Dimensions for penguins at Palmer Station LTER",
x = "Flipper length (mm)", y = "Bill length (mm)",
color = "Penguin species", shape = "Penguin species"
) +
theme_minimal()
#| label: plot-penguins
#| warning: false
#| echo: false
ggplot(penguins,
aes(x = flipper_length_mm, y = bill_length_mm)) +
geom_point(aes(color = species, shape = species)) +
scale_color_manual(values = c("darkorange","purple","cyan4")) +
labs(
title = "Flipper and bill length",
subtitle = "Dimensions for penguins at Palmer Station LTER",
x = "Flipper length (mm)", y = "Bill length (mm)",
color = "Penguin species", shape = "Penguin species"
) +
theme_minimal()
#| label: load-packages
#| include: false
library(tidyverse)
library(palmerpenguins)
#| label: plot-penguins
#| warning: false
#| echo: false
ggplot(penguins,
aes(x = flipper_length_mm, y = bill_length_mm)) +
geom_point(aes(color = species, shape = species)) +
scale_color_manual(values = c("darkorange","purple","cyan4")) +
labs(
title = "Flipper and bill length",
subtitle = "Dimensions for penguins at Palmer Station LTER",
x = "Flipper length (mm)", y = "Bill length (mm)",
color = "Penguin species", shape = "Penguin species"
) +
theme_minimal()
# Task 2 - Galaxy Assignment
library(tidyverse)
# Read in datafile
raw_file <- readLines(con = "UCNG_Table4.txt")
setwd("~/Desktop/git-tinnguy3n")
# Read in datafile
raw_file <- readLines(con = "UCNG_Table4.txt")
# Find the line
L <-
substr(x = raw_file, start = 2, stop = 3) %>%
grep("--", ., value = TRUE) %>%
head(2)
# Extract variable descriptions to text file
cat(raw_file[1:1], sep = "\n", file = "variable_description")
variable_des <- readLines("variable_description")
# Extract variable names in a vector
variable_names <-
str_split(string = variable_des , pattern = "\\|") %>%
unlist() %>%
str_trim()
# Comma separated values
comma_separated_values <-
raw_file[3:763] %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
# Separated values with variable name
comma_separated_values_with_name <-
c(paste(variable_names, collapse = ","),
comma_separated_values)
# Create new file
cat(comma_separated_values_with_name, sep = "\n", file = "Galaxy_data")
galaxies <- read_csv("Galaxy_data")     # Clean dataframe
galaxies
galaxies %>%
ggplot(aes(x = error, y = cz))
galaxies %>%
ggplot(aes(x = error, y = cz)) +
geom_point()
galaxies %>%
ggplot(aes(x = name, y = cz)) +
geom_point()
galaxies %>%
ggplot(aes(x = name, y = cz)) +
geom_point() +
theme_classic()
galaxies %>%
ggplot(aes(x = name, y = cz)) +
geom_point() +
theme_classic()
# Problem 3 - Plot and star size
raw_file2 <- readLines(con = "suites_dw_Table1.txt")
raw_file2
# Find the line
L2 <-
substr(x = raw_file2, start = 2, stop = 3) %>%
grep("--", ., value = TRUE) %>%
head(2)
L2
rm(ls(L2)
